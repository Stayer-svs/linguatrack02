# app_vocab/bot.py

import os
import random
import django
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async  # –¥–ª—è Django –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiogram
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import BufferedInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from .models import Word

bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Ä–µ–∂–∏–º —Ä–µ–≤–µ—Ä—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ø–∞–º—è—Ç–∏)
user_reverse_mode = {}

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üìö –°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            ],
            [
                KeyboardButton(text="üéØ –¢–µ—Å—Ç"),
                KeyboardButton(text="üÉè –ö–∞—Ä—Ç–æ—á–∫–∏")
            ],
            [
                KeyboardButton(text="üîä –û–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ"),
                KeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ Django ORM
@sync_to_async
def get_all_words():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã"""
    return list(Word.objects.all())


@sync_to_async
def get_word_by_id(word_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ –ø–æ ID"""
    try:
        return Word.objects.get(id=word_id)
    except Word.DoesNotExist:
        return None


@sync_to_async
def update_word_knowledge(word, increment=True):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
    if increment:
        word.knowledge_level += 1
    else:
        if word.knowledge_level > 0:
            word.knowledge_level -= 1
    word.save()
    return word.knowledge_level


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π."
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéì –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton(text="üîÑ –†–µ–∂–∏–º: –°–ª–æ–≤–æ ‚Üí –ü–µ—Ä–µ–≤–æ–¥"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )
    #await message.answer(welcome_text, reply_markup=keyboard)
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
@dp.message(F.text.startswith("üîÑ –†–µ–∂–∏–º:"))
async def toggle_reverse_mode(message: types.Message):
    user_id = message.from_user.id
    current_mode = user_reverse_mode.get(user_id, False)

    new_mode = not current_mode
    user_reverse_mode[user_id] = new_mode

    if new_mode:
        mode_text = "–ü–ï–†–ï–í–û–î ‚Üí –°–õ–û–í–û"
        hint = "(–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥, –Ω—É–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ)"
    else:
        mode_text = "–°–õ–û–í–û ‚Üí –ü–ï–†–ï–í–û–î"
        hint = "(–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ, –Ω—É–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥)"

    await message.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text}\n{hint}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
@dp.message(F.text == "üéì –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_training(message: types.Message):
    await send_random_word(message.from_user.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_random_word(user_id: int):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    all_words = await get_all_words()

    if not all_words:
        await bot.send_message(user_id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
        return

    word = random.choice(all_words)
    is_reverse = user_reverse_mode.get(user_id, False)

    if is_reverse:
        question = f"<b>–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É —Å–ª–æ–≤–∞?</b>\n\n{word.translation}"
    else:
        question = f"<b>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ?</b>\n\n{word.original}"
        if word.transcription:
            question += f"\n<code>[{word.transcription}]</code>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§î –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_{word.id}")],
    ])

    await bot.send_message(user_id, question, reply_markup=keyboard, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"
@dp.callback_query(F.data.startswith("show_"))
async def show_answer(callback: types.CallbackQuery):
    word_id = int(callback.data.split('_')[1])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞
    word = await get_word_by_id(word_id)

    if not word:
        await callback.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    user_id = callback.from_user.id
    is_reverse = user_reverse_mode.get(user_id, False)

    if is_reverse:
        answer = f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n{word.original}"
        if word.transcription:
            answer += f"\n<code>[{word.transcription}]</code>"
    else:
        answer = f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n{word.translation}"

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–Ω–∞—é", callback_data=f"know_{word.id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ –∑–Ω–∞—é", callback_data=f"dont_know_{word.id}")],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="next_word")]
    ])

    await callback.message.edit_text(
        f"{callback.message.text}\n\n{answer}",
        reply_markup=new_keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ó–Ω–∞—é" –∏ "–ù–µ –∑–Ω–∞—é"
@dp.callback_query(F.data.startswith("know_"))
async def know_word(callback: types.CallbackQuery):
    word_id = int(callback.data.split('_')[1])

    word = await get_word_by_id(word_id)
    if word:
        new_level = await update_word_knowledge(word, increment=True)
        await callback.answer(f"–û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {new_level}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")


@dp.callback_query(F.data.startswith("dont_know_"))
async def dont_know_word(callback: types.CallbackQuery):
    word_id = int(callback.data.split('_')[1])

    word = await get_word_by_id(word_id)
    if word:
        new_level = await update_word_knowledge(word, increment=False)
        await callback.answer(f"–ü–æ–≤—Ç–æ—Ä–∏–º! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤–∞: {new_level}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"
@dp.callback_query(F.data == "next_word")
async def next_word(callback: types.CallbackQuery):
    await callback.message.delete()
    await send_random_word(callback.from_user.id)
    await callback.answer()


# –°–¢–ê–†–´–ô –°–ò–ù–¢–ê–ö–°–ò–° (aiogram 2.x):
# @dp.message_handler(commands=['link'])

# –ù–û–í–´–ô –°–ò–ù–¢–ê–ö–°–ò–° (aiogram 3.x):
@dp.message(Command("link"))
async def link_account(message: Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_id = message.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
    import secrets
    link_code = secrets.token_hex(4).upper()  # 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥

    await message.answer(
        f"üîó **–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
        f"–í–∞—à –∫–æ–¥: `{link_code}`\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ Telegram-–±–æ—Ç–∞\n"
        f"3. –ê–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç —Å–≤—è–∑–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç ‚è≥"
    )

@dp.message(Command("say"))
async def say_word(message: Message):
    """–û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ TTS"""
    command_parts = message.text.split(' ', 1)

    if len(command_parts) < 2:
        await message.answer(
            "üéØ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/say —Å–ª–æ–≤–æ` - –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
            "**–ü—Ä–∏–º–µ—Ä:**\n"
            "`/say hello`\n"
            "`/say computer`"
        )
        return

    word_to_speak = command_parts[1].strip()

    if len(word_to_speak) > 50:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    processing_msg = await message.answer("üîä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ...")

    try:
        from app_vocab.tts_service import text_to_speech

        result = text_to_speech(word_to_speak, lang='en')

        if result and result['filepath']:
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë –í aiogram 3.x
            with open(result['filepath'], 'rb') as audio_file:
                audio_data = audio_file.read()

            voice_message = BufferedInputFile(audio_data, filename="word.mp3")

            await message.answer_voice(
                voice=voice_message,
                caption=f"üîä **{word_to_speak}**"
            )
            await processing_msg.delete()
        else:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")

    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"TTS Error in bot: {e}")


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_progress(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from app_vocab.services import get_user_statistics
        from django.contrib.auth.models import User

        demo_user = await sync_to_async(User.objects.first)()

        if demo_user:
            stats = await sync_to_async(get_user_statistics)(demo_user)

            stats_text = (
                "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
                f"‚Ä¢ üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {stats['total_words']}\n"
                f"‚Ä¢ üÜï –ù–æ–≤—ã–µ: {stats['new_words']}\n"
                f"‚Ä¢ üìñ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['learning_words']}\n"
                f"‚Ä¢ ‚úÖ –ò–∑—É—á–µ–Ω–æ: {stats['learned_words']}\n"
                f"‚Ä¢ üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_words']}\n\n"
                "üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            )
        else:
            stats_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    except Exception as e:
        print(f"Stats error: {e}")
        stats_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    await message.answer(stats_text)


@dp.message(F.text == "üìö –°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_words(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è"""
    try:
        from app_vocab.services import get_today_words
        from django.contrib.auth.models import User

        demo_user = await sync_to_async(User.objects.first)()

        if demo_user:
            # –ü–æ–ª—É—á–∞–µ–º QuerySet –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –µ–≥–æ
            today_words_qs = await sync_to_async(get_today_words)(demo_user, limit=10)
            today_words_list = await sync_to_async(list)(today_words_qs)

            if today_words_list:
                words_text = "üìö **–°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
                for user_word in today_words_list:
                    words_text += f"‚Ä¢ {user_word.word.original} - {user_word.word.translation}\n"

                words_text += f"\nüéØ –í—Å–µ–≥–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {len(today_words_list)} —Å–ª–æ–≤"
            else:
                words_text = "üéâ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!**\n\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç."

        else:
            words_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö"

    except Exception as e:
        print(f"Today words error: {e}")
        words_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤"

    await message.answer(words_text, reply_markup=get_main_keyboard())


@dp.message(F.text == "üéØ –¢–µ—Å—Ç")
async def start_test(message: Message):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"""
    await message.answer(
        "üß™ **–†–µ–∂–∏–º —Ç–µ—Å—Ç–∞**\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç!\n\n"
        "–ê –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏")
async def show_cards(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    await message.answer(
        "üÉè **–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–ª–æ–≤!",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def link_account_button(message: Message):
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        "üîó **–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/link` - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏\n\n"
        "–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏.",
        reply_markup=get_main_keyboard()
    )


# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
class QuizStates(StatesGroup):
    waiting_for_answer = State()
    in_progress = State()


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    #from .services import get_quiz_question
    from .services import get_quiz_question_async

    #question_data = get_quiz_question()
    question_data = await get_quiz_question_async()

    if not question_data:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for option in question_data['options']:
        keyboard.append([types.KeyboardButton(text=option)])

    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await message.answer(
        f"üß™ <b>–¢–µ—Å—Ç:</b>\n\n"
        f"<i>{question_data['question']}</i>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(QuizStates.waiting_for_answer)
    await state.update_data(
        correct_answer=question_data['correct_answer'],
        question_type=question_data['type'],
        score=0,
        total_questions=1
    )


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message(QuizStates.waiting_for_answer)
async def handle_quiz_answer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ"""
    #from .services import get_quiz_question
    from .services import get_quiz_question_async

    user_data = await state.get_data()
    correct_answer = user_data.get('correct_answer')
    user_answer = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = user_answer == correct_answer
    current_score = user_data.get('score', 0)

    if is_correct:
        current_score += 1
        response = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> üéâ"
    else:
        response = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{correct_answer}</code>"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    await state.update_data(score=current_score)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    #next_question = get_quiz_question()
    next_question = await get_quiz_question_async()

    if next_question:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        keyboard = []
        for option in next_question['options']:
            keyboard.append([types.KeyboardButton(text=option)])

        reply_markup = types.ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await message.answer(
            f"{response}\n\n"
            f"üß™ <b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n"
            f"<i>{next_question['question']}</i>\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {current_score}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            correct_answer=next_question['correct_answer'],
            question_type=next_question['type'],
            total_questions=user_data.get('total_questions', 0) + 1
        )

    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        total_questions = user_data.get('total_questions', 1)
        percentage = (current_score / total_questions) * 100

        await message.answer(
            f"üèÅ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {current_score}/{total_questions}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {percentage:.1f}%\n\n"
            f"{'üéâ –û—Ç–ª–∏—á–Ω–æ!' if percentage >= 80 else 'üëç –•–æ—Ä–æ—à–æ!' if percentage >= 60 else 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!'}",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())