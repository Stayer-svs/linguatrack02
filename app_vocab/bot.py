import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand
from aiogram.types import BufferedInputFile
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()


# ===== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====
class AddWord(StatesGroup):
    waiting_original = State()
    waiting_translation = State()


class QuizStates(StatesGroup):
    waiting_for_answer = State()


class CardStates(StatesGroup):
    viewing_card = State()
    rating_difficulty = State()


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ"""
    try:
        commands = [
            BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand(command="/words", description="–ú–æ–∏ —Å–ª–æ–≤–∞"),
            BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"),
            BotCommand(command="/quiz", description="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"),
            BotCommand(command="/cards", description="–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"),
            BotCommand(command="/stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="/audio", description="–û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤"),
            BotCommand(command="/menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        ]
        await bot.set_my_commands(commands)
        print("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")


def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton(text="üìö –ú–æ–∏ —Å–ª–æ–≤–∞"), KeyboardButton(text="üß™ –¢–µ—Å—Ç")],
        [KeyboardButton(text="üìñ –ö–∞—Ä—Ç–æ—á–∫–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton(text="üîä –û–∑–≤—É—á–∫–∞")],
        [KeyboardButton(text="‚èπÔ∏è –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )


async def clear_previous_state(state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        return True
    return False


async def show_next_card(message: types.Message, state: FSMContext, cards: list, current_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    next_index = current_index + 1

    if next_index >= len(cards):
        await message.answer(
            "üéâ <b>–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!</b>\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üèÜ",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        await state.clear()
        return

    card = cards[next_index]
    remaining = len(cards) - next_index - 1

    keyboard = [
        [KeyboardButton(text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥")],
        [KeyboardButton(text="‚è© –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")]
    ]

    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await message.answer(
        f"üìñ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ {next_index + 1}/{len(cards)}</b>\n\n"
        f"<i>{card['word']}</i>\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫: {remaining}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    await state.update_data(
        current_index=next_index,
        translation=card['translation']
    )
    await state.set_state(CardStates.viewing_card)


# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    await clear_previous_state(state)

    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vocabulary Trainer!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ üöÄ\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìö <b>–ú–æ–∏ —Å–ª–æ–≤–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è\n"
        "‚Ä¢ üß™ <b>–¢–µ—Å—Ç</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ üìñ <b>–ö–∞—Ä—Ç–æ—á–∫–∏</b> - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏\n"
        "‚Ä¢ üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ üîä <b>–û–∑–≤—É—á–∫–∞</b> - –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é üì±",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )


@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    await clear_previous_state(state)
    await cmd_start(message, state)


@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if await clear_previous_state(state):
        await message.answer(
            "‚èπÔ∏è <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")


# ===== –†–ê–ë–û–¢–ê –°–û –°–õ–û–í–ê–ú–ò =====
@dp.message(Command("words"))
@dp.message(F.text == "üìö –ú–æ–∏ —Å–ª–æ–≤–∞")
async def cmd_words(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await clear_previous_state(state)

    from .models import Word
    from asgiref.sync import sync_to_async

    @sync_to_async
    def get_words_async():
        return list(Word.objects.all()[:10])

    words = await get_words_async()

    if words:
        response = "üìö <b>–í–∞—à–∏ —Å–ª–æ–≤–∞:</b>\n\n" + "\n".join(
            [f"‚Ä¢ {word.original} - {word.translation}" for word in words]
        )
    else:
        response = "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!"

    await message.answer(response, parse_mode='HTML')


@dp.message(Command("add"))
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
async def cmd_add(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    await clear_previous_state(state)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:")
    await state.set_state(AddWord.waiting_original)


@dp.message(AddWord.waiting_original)
async def process_original(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    await state.update_data(original=message.text)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")
    await state.set_state(AddWord.waiting_translation)


@dp.message(AddWord.waiting_translation)
async def process_translation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–æ"""
    user_data = await state.get_data()

    from .models import Word
    from asgiref.sync import sync_to_async

    @sync_to_async
    def save_word_async():
        word = Word(
            original=user_data['original'],
            translation=message.text
        )
        word.save()
        return word

    word = await save_word_async()

    await message.answer(
        f"‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        f"<code>{word.original}</code> - <code>{word.translation}</code>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )
    await state.clear()


# ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
@dp.message(Command("quiz"))
@dp.message(F.text == "üß™ –¢–µ—Å—Ç")
async def cmd_quiz(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    await clear_previous_state(state)

    from .services import get_quiz_question_async

    question_data = await get_quiz_question_async()

    if not question_data:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add",
            reply_markup=get_main_keyboard()
        )
        return

    keyboard = []
    for option in question_data['options']:
        keyboard.append([KeyboardButton(text=option)])

    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        f"üß™ <b>–¢–µ—Å—Ç:</b>\n\n<i>{question_data['question']}</i>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    await state.set_state(QuizStates.waiting_for_answer)
    await state.update_data(
        correct_answer=question_data['correct_answer'],
        question_type=question_data['type'],
        score=0,
        total_questions=1
    )


@dp.message(QuizStates.waiting_for_answer)
async def handle_quiz_answer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ"""
    from .services import get_quiz_question_async

    user_data = await state.get_data()
    correct_answer = user_data.get('correct_answer')
    user_answer = message.text

    is_correct = user_answer == correct_answer
    current_score = user_data.get('score', 0)

    if is_correct:
        current_score += 1
        response = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> üéâ"
    else:
        response = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{correct_answer}</code>"

    await state.update_data(score=current_score)
    next_question = await get_quiz_question_async()

    if next_question:
        keyboard = []
        for option in next_question['options']:
            keyboard.append([KeyboardButton(text=option)])

        reply_markup = ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"{response}\n\nüß™ <b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n"
            f"<i>{next_question['question']}</i>\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {current_score}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        await state.update_data(
            correct_answer=next_question['correct_answer'],
            question_type=next_question['type'],
            total_questions=user_data.get('total_questions', 0) + 1
        )

    else:
        total_questions = user_data.get('total_questions', 1)
        percentage = (current_score / total_questions) * 100

        await message.answer(
            f"üèÅ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {current_score}/{total_questions}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {percentage:.1f}%\n\n"
            f"{'üéâ –û—Ç–ª–∏—á–Ω–æ!' if percentage >= 80 else 'üëç –•–æ—Ä–æ—à–æ!' if percentage >= 60 else 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!'}",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        await state.clear()


# ===== –ö–ê–†–¢–û–ß–ö–ò =====
@dp.message(Command("cards"))
@dp.message(F.text == "üìñ –ö–∞—Ä—Ç–æ—á–∫–∏")
async def cmd_cards(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    await clear_previous_state(state)

    from .services import get_review_cards_async

    cards = await get_review_cards_async()

    if not cards:
        await message.answer(
            "‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add",
            reply_markup=get_main_keyboard()
        )
        return

    card = cards[0]
    remaining = len(cards) - 1

    keyboard = [
        [KeyboardButton(text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥")],
        [KeyboardButton(text="‚è© –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")]
    ]

    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await message.answer(
        f"üìñ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ 1/{len(cards)}</b>\n\n"
        f"<i>{card['word']}</i>\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫: {remaining}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    await state.set_state(CardStates.viewing_card)
    await state.update_data(
        cards=cards,
        current_index=0,
        translation=card['translation']
    )


@dp.message(CardStates.viewing_card)
async def handle_card_action(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    user_data = await state.get_data()
    cards = user_data.get('cards', [])
    current_index = user_data.get('current_index', 0)
    translation = user_data.get('translation', '')

    if message.text == "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥":
        keyboard = [
            [KeyboardButton(text="‚úÖ –õ–µ–≥–∫–æ"), KeyboardButton(text="üîÑ –ù–æ—Ä–º–∞–ª—å–Ω–æ"), KeyboardButton(text="‚ùå –¢—Ä—É–¥–Ω–æ")],
            [KeyboardButton(text="‚è© –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")]
        ]

        reply_markup = ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )

        await message.answer(
            f"üìñ <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n\n<code>{translation}</code>\n\n<i>–û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞:</i>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        await state.set_state(CardStates.rating_difficulty)

    elif message.text == "‚è© –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞":
        await show_next_card(message, state, cards, current_index)


@dp.message(CardStates.rating_difficulty)
async def handle_difficulty_rating(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞"""
    user_data = await state.get_data()
    cards = user_data.get('cards', [])
    current_index = user_data.get('current_index', 0)

    difficulty_emojis = {
        "‚úÖ –õ–µ–≥–∫–æ": "–ª–µ–≥–∫–æ",
        "üîÑ –ù–æ—Ä–º–∞–ª—å–Ω–æ": "–Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        "‚ùå –¢—Ä—É–¥–Ω–æ": "—Ç—Ä—É–¥–Ω–æ"
    }

    if message.text in difficulty_emojis:
        difficulty = difficulty_emojis[message.text]
        current_card = cards[current_index]
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–ª —Å–ª–æ–≤–æ '{current_card['word']}' –∫–∞–∫ '{difficulty}'")

        await message.answer(
            f"üìä –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: <b>{difficulty}</b>\n"
            f"–°–ª–æ–≤–æ: <code>{current_card['word']}</code>",
            parse_mode='HTML'
        )

    await show_next_card(message, state, cards, current_index)


# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–ó–í–£–ß–ö–ê =====

@dp.message(Command("stats"))
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await clear_previous_state(state)

    from .models import Word
    from datetime import datetime, timedelta
    from asgiref.sync import sync_to_async

    @sync_to_async
    def get_stats_async():
        total_words = Word.objects.count()
        today = datetime.now().date()
        words_today = Word.objects.filter(date_added__date=today).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        last_7_days = []
        for i in range(7):
            date = today - timedelta(days=i)
            count = Word.objects.filter(date_added__date=date).count()
            last_7_days.append({'date': date, 'count': count})

        return total_words, words_today, last_7_days

    total_words, words_today, last_7_days = await get_stats_async()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    response = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    response += f"‚Ä¢ üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{total_words}</b>\n"
    response += f"‚Ä¢ üÜï –ù–æ–≤—ã–µ: <b>{words_today}</b>\n"
    response += f"‚Ä¢ üìñ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: <b>0</b>\n"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    response += f"‚Ä¢ ‚úÖ –ò–∑—É—á–µ–Ω–æ: <b>0</b>\n"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è
    response += f"‚Ä¢ üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{total_words}</b>\n\n"

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
    response += "<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
    for day in last_7_days[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
        emoji = "üî•" if day['count'] > 0 else "‚ö™"
        response += f"{emoji} {day['date'].strftime('%d.%m')}: {day['count']} —Å–ª–æ–≤\n"

    response += "\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

    await message.answer(response, parse_mode='HTML')


# ===== –û–ó–í–£–ß–ö–ê say =====

@dp.message(Command("say"))
async def cmd_say(message: types.Message, state: FSMContext):
    """–û–∑–≤—É—á–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    await clear_previous_state(state)

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–±–µ–ª–æ–≤
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–∑–≤—É—á–∫–∏:\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<code>/say hello</code>\n"
            "<code>/say   –ø—Ä–∏–≤–µ—Ç</code>\n"
            "<code>/saybreakfast</code>",
            parse_mode='HTML'
        )
        return

    word_text = ' '.join(parts[1:])  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "/say"

    from .models import Word
    from asgiref.sync import sync_to_async

    @sync_to_async
    def find_word_async():
        try:
            # –ò—â–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ
            return Word.objects.get(original=word_text)
        except Word.DoesNotExist:
            try:
                # –ò—â–µ–º –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
                return Word.objects.get(translation=word_text)
            except Word.DoesNotExist:
                return None

    word = await find_word_async()

    if word:
        audio_url = word.get_audio_url()

        if audio_url:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            import os
            from django.conf import settings

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename = audio_url.replace('/media/audio/', '')
            filepath = os.path.join(settings.MEDIA_ROOT, 'audio', filename)

            if os.path.exists(filepath):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                with open(filepath, 'rb') as audio_file:
                    await message.answer(f"üîä <b>{word.original}</b>", parse_mode='HTML')
                    await message.answer_audio(
                        audio=types.BufferedInputFile(audio_file.read(), filename=f"{word.original}.mp3"),
                        title=word.original,
                        performer="Vocabulary Trainer"
                    )
            else:
                await message.answer(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è '{word.original}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è '{word.original}'")
    else:
        await message.answer(f"‚ùå –°–ª–æ–≤–æ '<code>{word_text}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ", parse_mode='HTML')

# ===== –û–ó–í–£–ß–ö–ê audio =====

@dp.message(Command("audio"))
@dp.message(F.text == "üîä –û–∑–≤—É—á–∫–∞")
async def cmd_audio(message: types.Message, state: FSMContext):
    """–û–∑–≤—É—á–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤"""
    await clear_previous_state(state)

    from .models import Word
    from asgiref.sync import sync_to_async

    @sync_to_async
    def get_words_async():
        return list(Word.objects.all()[:3])

    words = await get_words_async()

    if not words:
        await message.answer("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        return

    for word in words:
        audio_url = word.get_audio_url()

        if audio_url:
            import os
            from django.conf import settings

            filename = audio_url.replace('/media/audio/', '')
            filepath = os.path.join(settings.MEDIA_ROOT, 'audio', filename)

            if os.path.exists(filepath):
                with open(filepath, 'rb') as audio_file:
                    await message.answer(f"üîä <b>{word.original}</b> - {word.translation}", parse_mode='HTML')
                    await message.answer_audio(
                        audio=types.BufferedInputFile(audio_file.read(), filename=f"{word.original}.mp3"),
                        title=word.original,
                        performer="Vocabulary Trainer"
                    )
            else:
                await message.answer(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è '{word.original}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è '{word.original}'")


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    await set_bot_commands()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())