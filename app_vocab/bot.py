# app_vocab/bot.py

import os
import random
import django
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async  # –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –í–ê–ñ–ù–£–Æ –§–£–ù–ö–¶–ò–Æ!

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from .models import Word

bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Ä–µ–∂–∏–º —Ä–µ–≤–µ—Ä—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ø–∞–º—è—Ç–∏)
user_reverse_mode = {}


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ Django ORM
@sync_to_async
def get_all_words():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã"""
    return list(Word.objects.all())


@sync_to_async
def get_word_by_id(word_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ –ø–æ ID"""
    try:
        return Word.objects.get(id=word_id)
    except Word.DoesNotExist:
        return None


@sync_to_async
def update_word_knowledge(word, increment=True):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
    if increment:
        word.knowledge_level += 1
    else:
        if word.knowledge_level > 0:
            word.knowledge_level -= 1
    word.save()
    return word.knowledge_level


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π."
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéì –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton(text="üîÑ –†–µ–∂–∏–º: –°–ª–æ–≤–æ ‚Üí –ü–µ—Ä–µ–≤–æ–¥"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(welcome_text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
@dp.message(F.text.startswith("üîÑ –†–µ–∂–∏–º:"))
async def toggle_reverse_mode(message: types.Message):
    user_id = message.from_user.id
    current_mode = user_reverse_mode.get(user_id, False)

    new_mode = not current_mode
    user_reverse_mode[user_id] = new_mode

    if new_mode:
        mode_text = "–ü–ï–†–ï–í–û–î ‚Üí –°–õ–û–í–û"
        hint = "(–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥, –Ω—É–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ)"
    else:
        mode_text = "–°–õ–û–í–û ‚Üí –ü–ï–†–ï–í–û–î"
        hint = "(–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ, –Ω—É–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥)"

    await message.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text}\n{hint}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
@dp.message(F.text == "üéì –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_training(message: types.Message):
    await send_random_word(message.from_user.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_random_word(user_id: int):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    all_words = await get_all_words()

    if not all_words:
        await bot.send_message(user_id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
        return

    word = random.choice(all_words)
    is_reverse = user_reverse_mode.get(user_id, False)

    if is_reverse:
        question = f"<b>–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É —Å–ª–æ–≤–∞?</b>\n\n{word.translation}"
    else:
        question = f"<b>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ?</b>\n\n{word.original}"
        if word.transcription:
            question += f"\n<code>[{word.transcription}]</code>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§î –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_{word.id}")],
    ])

    await bot.send_message(user_id, question, reply_markup=keyboard, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"
@dp.callback_query(F.data.startswith("show_"))
async def show_answer(callback: types.CallbackQuery):
    word_id = int(callback.data.split('_')[1])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞
    word = await get_word_by_id(word_id)

    if not word:
        await callback.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    user_id = callback.from_user.id
    is_reverse = user_reverse_mode.get(user_id, False)

    if is_reverse:
        answer = f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n{word.original}"
        if word.transcription:
            answer += f"\n<code>[{word.transcription}]</code>"
    else:
        answer = f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n{word.translation}"

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–Ω–∞—é", callback_data=f"know_{word.id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ –∑–Ω–∞—é", callback_data=f"dont_know_{word.id}")],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="next_word")]
    ])

    await callback.message.edit_text(
        f"{callback.message.text}\n\n{answer}",
        reply_markup=new_keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ó–Ω–∞—é" –∏ "–ù–µ –∑–Ω–∞—é"
@dp.callback_query(F.data.startswith("know_"))
async def know_word(callback: types.CallbackQuery):
    word_id = int(callback.data.split('_')[1])

    word = await get_word_by_id(word_id)
    if word:
        new_level = await update_word_knowledge(word, increment=True)
        await callback.answer(f"–û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {new_level}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")


@dp.callback_query(F.data.startswith("dont_know_"))
async def dont_know_word(callback: types.CallbackQuery):
    word_id = int(callback.data.split('_')[1])

    word = await get_word_by_id(word_id)
    if word:
        new_level = await update_word_knowledge(word, increment=False)
        await callback.answer(f"–ü–æ–≤—Ç–æ—Ä–∏–º! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤–∞: {new_level}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"
@dp.callback_query(F.data == "next_word")
async def next_word(callback: types.CallbackQuery):
    await callback.message.delete()
    await send_random_word(callback.from_user.id)
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())