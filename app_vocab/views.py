# app_vocab/views.py

import csv
from django.http import HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
from django.urls import reverse
from django.utils import timezone
from django.http import JsonResponse
from .models import Word, UserWord


from .services import (
    get_today_words,
    process_user_answer,
    get_user_statistics,
    get_or_create_user_profile,
    get_words_for_games
)

# –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤ (TTS)
from .tts_service import text_to_speech



@login_required
def word_list(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞-—Ç—Ä–µ–Ω–∞–∂–µ—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.
    """
    # –§–ò–õ–¨–¢–†–£–ï–ú –°–õ–û–í–ê –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    words_for_review = Word.objects.filter(
        userword__user=request.user,  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –§–ò–õ–¨–¢–†
        userword__next_review__lte=timezone.now()
    ).order_by('userword__next_review')[:10]

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    is_reverse = request.GET.get('reverse', '0') == '1'
    word_id = request.GET.get('word_id')
    action = request.GET.get('action')

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ª–æ–≤–∞–º–∏
    if word_id and action:
        user_word = get_object_or_404(UserWord, id=word_id, user=request.user)

        if action == 'show_translation':
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ - –Ω–µ –º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            pass
        elif action == 'know':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç —Å–ª–æ–≤–æ (quality=4 - "–∑–Ω–∞–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π")
            process_user_answer(user_word, quality=4)
        elif action == 'dont_know':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç —Å–ª–æ–≤–æ (quality=2 - "–ø–æ—á—Ç–∏ –≤—Å–ø–æ–º–Ω–∏–ª")
            process_user_answer(user_word, quality=2)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        redirect_url = f"{request.path}?reverse={int(is_reverse)}"
        return redirect(redirect_url)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    today_words = get_today_words(request.user, limit=20)

    # –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞
    if not today_words:
        context = {
            'words': [],
            'is_reverse': is_reverse,
            'no_words_message': "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!",
            'statistics': get_user_statistics(request.user)
        }
        return render(request, 'app_vocab/word_list.html', context)

    # –ü–µ—Ä–µ–¥–∞–µ–º UserWord –æ–±—ä–µ–∫—Ç—ã –≤ —à–∞–±–ª–æ–Ω (–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ Word)
    context = {
        'user_words': today_words,
        'is_reverse': is_reverse,
        'statistics': get_user_statistics(request.user),
    }
    return render(request, 'app_vocab/word_list.html', context)


@login_required
def statistics(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    stats = get_user_statistics(request.user)
    return render(request, 'app_vocab/statistics.html', {'statistics': stats})


@login_required
def multiple_choice_test(request):
    """
    –¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
   #from .services import get_today_words
    import random

    profile = get_or_create_user_profile(request.user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø —Ç–µ—Å—Ç–∞
    if not profile.enable_multiple_choice:
        messages.info(request, "–¢–µ—Å—Ç —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return redirect('app_vocab:settings')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫

    #from .services import get_words_for_games
    today_words = get_words_for_games(request.user, min_words=5)

    if not today_words:
        context = {
            'no_words_message': "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
        }
        return render(request, 'app_vocab/multiple_choice.html', context)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    question_word = random.choice(today_words)

    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    all_words = list(Word.objects.exclude(id=question_word.word.id))
    wrong_answers = random.sample(all_words, min(3, len(all_words)))

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
    options = [question_word.word] + wrong_answers
    random.shuffle(options)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    correct_answer_id = question_word.word.id

    context = {
        'question_word': question_word,
        'options': options,
        'correct_answer_id': correct_answer_id,
        'total_questions': len(today_words),
    }

    return render(request, 'app_vocab/multiple_choice.html', context)


@login_required
def check_multiple_choice(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ —Å –≤—ã–±–æ—Ä–æ–º (AJAX)"""
    if request.method == 'POST':
        try:
            user_answer = request.POST.get('user_answer')
            correct_answer = request.POST.get('correct_answer')

            if not user_answer or not correct_answer:
                return JsonResponse({'error': 'Missing answer data'})

            is_correct = (user_answer == correct_answer)

            correct_word = Word.objects.get(id=correct_answer)

            if is_correct:
                return JsonResponse({
                    'correct': True,
                    'message': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ',
                    'correct_answer': correct_word.translation
                })
            else:
                user_answer_word = Word.objects.get(id=user_answer)
                return JsonResponse({
                    'correct': False,
                    'message': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üí™',
                    'correct_answer': correct_word.translation,
                    'user_answer': user_answer_word.translation
                })

        except Word.DoesNotExist:
            return JsonResponse({'error': 'Word not found'})
        except Exception as e:
            return JsonResponse({'error': str(e)})

    return JsonResponse({'error': 'Invalid request method'})

###
@login_required
def my_words(request):
    """
    –ì–ª–∞–≤–Ω–∞—è –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ú–æ–π –°–ª–æ–≤–∞—Ä—å" - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ GET –∑–∞–ø—Ä–æ—Å–∞
    sort_by = request.GET.get('sort', 'date_added')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    # –§–ò–õ–¨–¢–†–£–ï–ú –°–õ–û–í–ê –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
    user_words = UserWord.objects.filter(user=request.user).select_related('word')

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if sort_by == 'original':
        user_words = user_words.order_by('word__original')
    elif sort_by == 'translation':
        user_words = user_words.order_by('word__translation')
    elif sort_by == 'level':
        user_words = user_words.order_by('repetition')
    elif sort_by == 'next_review':
        user_words = user_words.order_by('next_review')
    else:  # date_added (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        user_words = user_words.order_by('-date_added')

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    words_stats = {
        'total': user_words.count(),
        'new': user_words.filter(repetition=0).count(),
        'learning': user_words.filter(repetition__range=[1, 3]).count(),
        'learned': user_words.filter(repetition__gte=4).count(),
    }

    context = {
        'user_words': user_words,
        'words_stats': words_stats,
        'current_sort': sort_by,
    }
    return render(request, 'app_vocab/my_words.html', context)


@login_required
def add_word(request):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == 'POST':
        original = request.POST.get('original', '').strip()
        translation = request.POST.get('translation', '').strip()
        transcription = request.POST.get('transcription', '').strip()
        example_sentence = request.POST.get('example_sentence', '').strip()

        if original and translation:
            # –ü–†–û–í–ï–†–Ø–ï–ú, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_word = Word.objects.filter(
                original=original,
                userword__user=request.user  # –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            ).first()

            if existing_word:
                messages.error(request, f'–°–ª–æ–≤–æ "{original}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!')
                return redirect('app_vocab:my_words')

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
            word = Word.objects.create(
                original=original,
                translation=translation,
                transcription=transcription,
                example_sentence=example_sentence,
                difficulty_level=0,
            )

            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            UserWord.objects.create(
                user=request.user,
                word=word
            )

            messages.success(request, f'–°–ª–æ–≤–æ "{original}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
            return redirect('app_vocab:my_words')
        else:
            messages.error(request, '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥')

    return render(request, 'app_vocab/add_word.html')


def remove_word(request, word_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == 'POST':
        try:
            user_word = UserWord.objects.get(id=word_id, user=request.user)
            user_word.delete()
            messages.success(request, '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è')
        except UserWord.DoesNotExist:
            messages.error(request, '–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

        # –°–û–•–†–ê–ù–Ø–ï–ú –°–û–†–¢–ò–†–û–í–ö–£ –ü–†–ò –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò
        current_sort = request.POST.get('current_sort', 'date_added')
        return redirect(f'{reverse("app_vocab:my_words")}?sort={current_sort}')

    return redirect('app_vocab:my_words')


###
@login_required
def matching_game(request):
    """
    –†–µ–∂–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–¥–±–æ—Ä–∞ —Å–ª–æ–≤.
    """
    #from .services import get_words_for_games
    import random

    profile = get_or_create_user_profile(request.user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø —Ç–µ—Å—Ç–∞
    if not profile.enable_matching:
        messages.info(request, "–ò–≥—Ä–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return redirect('app_vocab:settings')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–≥—Ä
    game_words = get_words_for_games(request.user, min_words=4)

    if len(game_words) < 4:
        context = {
            'no_words_message': f"–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 4 —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã. –í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ: {len(game_words)} —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤!"
        }
        return render(request, 'app_vocab/matching_game.html', context)

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã
    word_pairs = []
    used_words = set()

    for user_word in game_words:
        if user_word.word.id not in used_words and len(word_pairs) < 6:  # –ú–∞–∫—Å–∏–º—É–º 6 –ø–∞—Ä
            word_pairs.append({
                'id': user_word.id,
                'original': user_word.word.original,
                'translation': user_word.word.translation,
                'transcription': user_word.word.transcription,
            })
            used_words.add(user_word.word.id)

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
    originals = [pair['original'] for pair in word_pairs]
    translations = [pair['translation'] for pair in word_pairs]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    random.shuffle(originals)
    random.shuffle(translations)

    context = {
        'originals': originals,
        'translations': translations,
        'word_pairs': word_pairs,
        'total_pairs': len(word_pairs),
    }

    return render(request, 'app_vocab/matching_game.html', context)
###
@login_required
def check_matching(request):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∂–∏–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
    """
    if request.method == 'POST':
        matches = request.POST.get('matches', '')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: original1:translation1,original2:translation2)
        correct_matches = 0
        total_matches = 0

        if matches:
            match_list = matches.split(',')
            total_matches = len(match_list)

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            correct_matches = total_matches

        context = {
            'correct_matches': correct_matches,
            'total_matches': total_matches,
            'success_rate': (correct_matches / total_matches * 100) if total_matches > 0 else 0,
        }

        return render(request, 'app_vocab/matching_result.html', context)

    return redirect('app_vocab:matching_game')


@login_required
def settings_page(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    profile = get_or_create_user_profile(request.user)

    if request.method == 'POST':
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        profile.daily_new_words = request.POST.get('daily_new_words', 5)
        profile.daily_review_limit = request.POST.get('daily_review_limit', 20)
        profile.default_interval = request.POST.get('default_interval', 1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤
        profile.enable_multiple_choice = 'enable_multiple_choice' in request.POST
        profile.enable_matching = 'enable_matching' in request.POST
        profile.test_questions_count = request.POST.get('test_questions_count', 10)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        profile.notification_enabled = 'notification_enabled' in request.POST
        profile.daily_goal_reminder = 'daily_goal_reminder' in request.POST

        profile.save()
        messages.success(request, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
        return redirect('app_vocab:settings')

    context = {
        'profile': profile,
    }
    return render(request, 'app_vocab/settings.html', context)


@login_required
def review_now(request, word_id):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (AJAX).
    """
    user_word = get_object_or_404(UserWord, id=word_id, user=request.user)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    user_word.next_review = timezone.now()
    user_word.save()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    return JsonResponse({
        'success': True,
        'message': f'–°–ª–æ–≤–æ "{user_word.word.original}" –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!'
    })

#   messages.success(request, f'–°–ª–æ–≤–æ "{user_word.word.original}" –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!')
#   return redirect('app_vocab:my_words')

def register(request):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            login(request, user)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from .services import get_or_create_user_profile
            get_or_create_user_profile(user)

            messages.success(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
            return redirect('app_vocab:word_list')
    else:
        form = UserCreationForm()

    return render(request, 'registration/register.html', {'form': form})

###
def export_words_csv(request):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV"""
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="my_dictionary.csv"'

    writer = csv.writer(response)
    writer.writerow(['–°–ª–æ–≤–æ', '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è', '–ü–µ—Ä–µ–≤–æ–¥', '–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'])

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° - —á–µ—Ä–µ–∑ userword
    words = Word.objects.filter(userword__user=request.user)

    for word in words:
        writer.writerow([
            word.original,
            word.transcription or '',
            word.translation,
            word.get_difficulty_level_display(),
            word.date_added.strftime('%Y-%m-%d') if word.date_added else ''
        ])

    return response

###

def import_words_csv(request):
    """–ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    if request.method == 'POST' and request.FILES.get('csv_file'):
        csv_file = request.FILES['csv_file']

        try:
            decoded_file = csv_file.read().decode('utf-8').splitlines()
            reader = csv.DictReader(decoded_file)

            imported_count = 0
            duplicate_count = 0

            for row in reader:
                original = row.get('–°–ª–æ–≤–æ', '').strip()
                translation = row.get('–ü–µ—Ä–µ–≤–æ–¥', '').strip()

                if not original or not translation:
                    continue

                # –ü–†–û–í–ï–†–Ø–ï–ú, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_word = Word.objects.filter(
                    original=original,
                    userword__user=request.user
                ).first()

                if existing_word:
                    duplicate_count += 1
                    continue

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
                word = Word.objects.create(
                    original=original,
                    translation=translation,
                    transcription=row.get('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è', '').strip(),
                   #example_sentence=row.get('–ü—Ä–∏–º–µ—Ä', '').strip(),
                    difficulty_level=0,
                )

                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                UserWord.objects.create(
                    user=request.user,
                    word=word
                )

                imported_count += 1

            if duplicate_count > 0:
                messages.warning(request,
                                 f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —Å–ª–æ–≤. –ü—Ä–æ–ø—É—â–µ–Ω–æ {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.')
            else:
                messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —Å–ª–æ–≤!')

        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}')

        return redirect('app_vocab:my_words')

    return render(request, 'app_vocab/import_csv.html')


from app_vocab.tts_service import text_to_speech


def generate_audio(request, word_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞"""
    try:
        word = Word.objects.get(id=word_id)
        tts_result = text_to_speech(word.original, lang='en')  # ‚Üê –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å

        if tts_result and 'url' in tts_result:
            return JsonResponse({'success': True, 'audio_url': tts_result['url']})  # ‚Üê –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ URL
        else:
            return JsonResponse({'success': False, 'error': 'Failed to generate audio'})

    except Word.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'Word not found'})



def telegram_bot(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram-–±–æ—Ç–æ–º"""
    context = {
        'bot_username': 'ForeLanguageBot',      # –¥–ª—è —Å—Å—ã–ª–∫–∏ (–∏–∑ URL)
        'bot_display_name': 'ForLanguageBot',   # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–º—è –±–æ—Ç–∞)
    }
    return render(request, 'app_vocab/telegram_bot.html', context)


def link_telegram(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if request.method == 'POST':
        link_code = request.POST.get('link_code', '').strip().upper()

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        if len(link_code) == 8:  # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ä—É—á–Ω—É—é
            profile = request.user.userprofile
            profile.telegram_id = "temp_" + link_code  # –ó–∞–≥–ª—É—à–∫–∞
            profile.save()

            messages.success(request, '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!')
        else:
            messages.error(request, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏')

    return redirect('app_vocab:telegram_bot')

