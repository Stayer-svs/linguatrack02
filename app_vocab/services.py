# app_vocab/services.py

from django.utils import timezone
from django.contrib.auth.models import User
from .models import Word, UserWord, UserProfile
import random


def get_or_create_user_profile(user):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    profile, created = UserProfile.objects.get_or_create(user=user)
    return profile


def get_or_create_user_word(user, word):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª–æ–≤–∞.
    """
    user_word, created = UserWord.objects.get_or_create(
        user=user,
        word=word,
        defaults={
            'next_review': timezone.now()
        }
    )
    return user_word


def get_today_words(user, limit=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    today = timezone.now()
    profile = get_or_create_user_profile(user)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
    if limit is None:
        limit = profile.daily_review_limit

    # –°–ª–æ–≤–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö next_review —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —Ä–∞–Ω—å—à–µ
    user_words = UserWord.objects.filter(
        user=user,
        next_review__lte=today
    ).select_related('word')

    # –ï—Å–ª–∏ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ (—Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    if user_words.count() < limit and profile.daily_new_words > 0:
        # –ò—â–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª
        user_word_ids = UserWord.objects.filter(user=user).values_list('word_id', flat=True)
        new_words = Word.objects.exclude(id__in=user_word_ids)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        new_words_count = min(new_words.count(), profile.daily_new_words, limit - user_words.count())
        if new_words_count > 0:
            selected_new_words = random.sample(list(new_words), new_words_count)
            for word in selected_new_words:
                user_word = get_or_create_user_word(user, word)
                user_words = list(user_words) + [user_word]

    return user_words[:limit]


def process_user_answer(user_word, quality):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É SM-2.
    quality: 0-5 (0 - –ø–æ–ª–Ω–æ–µ –Ω–µ–∑–Ω–∞–Ω–∏–µ, 5 - –ª–µ–≥–∫–æ–µ –≤—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    user_word.update_progress(quality)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    profile = get_or_create_user_profile(user_word.user)
    profile.total_reviews += 1

    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –ø–µ—Ä–µ—à–ª–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–∏–∑—É—á–µ–Ω–Ω—ã—Ö"
    if user_word.repetition >= 4:
        profile.total_words_learned = UserWord.objects.filter(
            user=user_word.user,
            repetition__gte=4
        ).count()

    profile.save()

    return user_word


def get_user_statistics(user):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    profile = get_or_create_user_profile(user)
    user_words = UserWord.objects.filter(user=user)

    total_words = user_words.count()
    new_words = user_words.filter(repetition=0).count()
    learning_words = user_words.filter(repetition__range=[1, 3]).count()
    learned_words = user_words.filter(repetition__gte=4).count()

   # today_words = get_today_words(user).count()
    today_words = len(get_today_words(user))

    return {
        'total_words': total_words,
        'new_words': new_words,
        'learning_words': learning_words,
        'learned_words': learned_words,
        'today_words': today_words,
        'total_reviews': profile.total_reviews,
        'streak_days': profile.streak_days,
    }


def get_words_for_games(user, min_words=6):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä (–±–µ—Ä–µ—Ç —Å–ª–æ–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é).
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    today_words = list(get_today_words(user, limit=20))

    print(f"üéÆ –î–õ–Ø –ò–ì–†: —Å–ª–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {len(today_words)}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: {min_words}")

    # –ï—Å–ª–∏ –º–∞–ª–æ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(today_words) < min_words:
        all_user_words = UserWord.objects.filter(user=user).select_related('word')
        additional_words = list(all_user_words)

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        random.shuffle(additional_words)
        for word in additional_words:
            if len(today_words) >= min_words * 2:  # –ë–µ—Ä–µ–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–ª—è –ø–∞—Ä
                break
            if word not in today_words:
                today_words.append(word)

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID —Å–ª–æ–≤–∞
    seen_ids = set()
    unique_words = []
    for user_word in today_words:
        if user_word.word.id not in seen_ids:
            seen_ids.add(user_word.word.id)
            unique_words.append(user_word)

    print(f"üéÆ –î–õ–Ø –ò–ì–†: –∏—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {len(unique_words)}")

    return unique_words[:12]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–≥—Ä—ã